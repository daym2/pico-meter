#to run standalone on the pico, file must be called main.py

#TODO:
# set gpio23 high for continuous PWM SMPS operation. 

#initialisation
import array
import machine
import utime
from machine import Pin, Timer
#another line

bit0 = Pin(0, Pin.OUT)
bit1 = Pin(1, Pin.OUT)
bit2 = Pin(2, Pin.OUT)
bit3 = Pin(3, Pin.OUT)
bit4 = Pin(4, Pin.OUT)
bit5 = Pin(5, Pin.OUT)
bit6 = Pin(6, Pin.OUT)
bit7 = Pin(7, Pin.OUT)
led = Pin(25, Pin.OUT)
adc = machine.ADC(0)

# range leds
pin100m = Pin(8,  Pin.OUT)
pin250m = Pin(9,  Pin.OUT)
pin500m = Pin(10, Pin.OUT)
pin1v   = Pin(11, Pin.OUT)
pin2v5  = Pin(12, Pin.OUT)
pin5v   = Pin(13, Pin.OUT)
pin10v  = Pin(14, Pin.OUT)
pin25v  = Pin(15, Pin.OUT)
pin50v  = Pin(16, Pin.OUT)

#onboard led
led.value(0)
LED_state = True
tim = Timer()
meterUpdateTim = Timer()


### timer callbacks ###

def tick(timer):
    global led, LED_state
    LED_state = not LED_state
    led.value(LED_state)
    
# meter update timer
def meterUpdateTick(timer):
    updateVal()



### functions ###

#
# showRange
# Light one or more range LEDs according to the bit pattern given. 
#
def showRange(pattern):
    global pin100m 
    global pin250m
    global pin500m
    global pin1v
    global pin2v5
    global pin5v
    global pin10v
    global pin25v
    global pin50v
    
    if (pattern & 0x001 == 0):
        pin100m.low()
    else:
        pin100m.high()
        
    if (pattern & 0x002 == 0):
        pin250m.low()
    else:
        pin250m.high()
        
    if (pattern & 0x004 == 0):
        pin500m.low()
    else:
        pin500m.high()
        
    if (pattern & 0x008 == 0):
        pin1v.low()
    else:
        pin1v.high()
        
    if (pattern & 0x010 == 0):
        pin2v5.low()
    else:
        pin2v5.high()
        
    if (pattern & 0x020 == 0):
        pin5v.low()
    else:
        pin5v.high()
        
    if (pattern & 0x040 == 0):
        pin10v.low()
    else:
        pin10v.high()
        
    if (pattern & 0x080 == 0):
        pin25v.low()
    else:
        pin25v.high()
        
    if (pattern & 0x100 == 0):
        pin50v.low()
    else:
        pin50v.high()

#
# driveMeter
# Set the meter drive to the position associated with val. 
#
def driveMeter(val=0):   
    if (val & 0x01 == 0):
        bit0.low()
    else:
        bit0.high()

    if (val & 0x02 == 0):
        bit1.low()
    else:
        bit1.high()

    if (val & 0x04 == 0):
        bit2.low()
    else:
        bit2.high()

    if (val & 0x08 == 0):
        bit3.low()
    else:
        bit3.high()

    if (val & 0x10 == 0):
        bit4.low()
    else:
        bit4.high()

    if (val & 0x20 == 0):
        bit5.low()
    else:
        bit5.high()

    if (val & 0x40 == 0):
        bit6.low()
    else:
        bit6.high()
                                
    if (val & 0x80 == 0):
        bit7.low()
    else:
        bit7.high()
                                
#
# lampTest
# Show a startup pattern to indicate that all lamps / meter work. 
#
def lampTest():
    showRange(0x001)
    utime.sleep(0.25)
    showRange(0x003)
    utime.sleep(0.25)
    showRange(0x007)
    utime.sleep(0.25)
    showRange(0x00f)
    utime.sleep(0.25)
    showRange(0x01f)
    utime.sleep(0.25)
    showRange(0x03f)
    utime.sleep(0.25)
    showRange(0x07f)
    utime.sleep(0.25)
    showRange(0x0ff)
    utime.sleep(0.25)
    showRange(0x1FF)
    driveMeter(200)
    utime.sleep(1)
    driveMeter(0)
    showRange(0)


#
# updateVal
#
def updateVal():
    global rdgs
    
    print ("arr len: ", len(rdgs))
    for i in range(len(rdgs)):
        rdgs[i] = pot.read_u16()>>8
    
    val = 0
    for i in range(len(rdgs)):
        val = val + rdgs[i]
        
    val = val / len(rdgs)
    val = int(val)
    driveMeter(val)
    
    print("mval: ", val)
    
    #print("b0: ", bit0.value())
    #print("b1: ", bit1.value())
    #print("b2: ", bit2.value())
    #print("b3: ", bit3.value())
    #print("b4: ", bit4.value())
    #print("b5: ", bit5.value())
    #print("b6: ", bit6.value())
    #print("b7: ", bit7.value())
    print(bit7.value(),bit6.value(), bit5.value(), bit4.value(), bit3.value(), bit2.value(), bit1.value(), bit0.value())
    
    print("Iactive: ")

#
# main program.  
#
pot = machine.ADC(0)
rdgs = [0, 0, 0, 0, 0, 0, 0, 0]
lampTest()

# initialise the led flash timer. 
tim.init(freq=1, mode=Timer.PERIODIC, callback=tick)

# and the meter update timer
tim.init(freq=10, mode=Timer.PERIODIC, callback=meterUpdateTick)



